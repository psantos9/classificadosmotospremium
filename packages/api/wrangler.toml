#:schema node_modules/wrangler/config-schema.json
name = "cmp-api"
main = "src/index.ts"
compatibility_date = "2024-12-18"
compatibility_flags = ["nodejs_compat"]
account_id = "32fd818651196edff39528b23343042d"

# Workers Logs
# Docs: https://developers.cloudflare.com/workers/observability/logs/workers-logs/
# Configuration: https://developers.cloudflare.com/workers/observability/logs/workers-logs/#enable-workers-logs
[observability]
enabled = true

[dev]
port = 8088

[[migrations]]
tag = "v1"
new_classes = [ "FipeClient" ]

# DEV
[env.dev]
name = "cmp-api-dev"

[env.dev.vars]
API_SECRET = "ceb9cf82-e516-44f8-8c61-3207a4f7c7ae-f8fdd7e1-4a0d-4542-8931-eb0c744c8995"

[[env.dev.kv_namespaces]]
binding = "CEP"
id = "98be910dd2ea46c8a65657864c208bf7"

[[env.dev.durable_objects.bindings]]
name = "FIPE_DO"
class_name = "FipeClient"


[[env.dev.d1_databases]]
binding = "DB"
database_name = "cmp"
database_id = "504e7e8a-b4a7-41c0-9e2d-5dab6e3b71b7"
preview_database_id = "504e7e8a-b4a7-41c0-9e2d-5dab6e3b71b7"
migrations_dir = "../shared/migrations"

[[env.dev.r2_buckets]]
binding = "AD_IMAGES_BUCKET"
bucket_name = "cmp-ad-images-preview"
preview_bucket_name = "cmp-ad-images-preview"

# PREVIEW
[env.preview]
name = "cmp-api-preview"
logpush = true # https://developers.cloudflare.com/workers/observability/logpush/
route = { pattern = "backend.preview.classificadosmotospremium.com.br", custom_domain = true, zone_name = "classificadosmotospremium.com.br" }

[[env.preview.kv_namespaces]]
binding = "CEP"
id = "98be910dd2ea46c8a65657864c208bf7"

[[env.preview.durable_objects.bindings]]
name = "FIPE_DO"
class_name = "FipeClient"

[[env.preview.d1_databases]]
binding = "DB"
database_name = "cmp"
database_id = "504e7e8a-b4a7-41c0-9e2d-5dab6e3b71b7"
preview_database_id = "504e7e8a-b4a7-41c0-9e2d-5dab6e3b71b7"
migrations_dir = "../shared/migrations"

[[env.preview.r2_buckets]]
binding = "AD_IMAGES_BUCKET"
bucket_name = "cmp-ad-images-preview"
preview_bucket_name = "cmp-ad-images-preview"

# PRODUCTION
[env.production]
name = "cmp-api"
logpush = true # https://developers.cloudflare.com/workers/observability/logpush/
route = { pattern = "backend.classificadosmotospremium.com.br", custom_domain = true, zone_name = "classificadosmotospremium.com.br" }

[[env.production.kv_namespaces]]
binding = "CEP"
id = "98be910dd2ea46c8a65657864c208bf7"

[[env.production.durable_objects.bindings]]
name = "FIPE_DO"
class_name = "FipeClient"

[[env.production.d1_databases]]
binding = "DB"
database_name = "cmp"
database_id = "04e7e8a-b4a7-41c0-9e2d-5dab6e3b71b7"
preview_database_id = "504e7e8a-b4a7-41c0-9e2d-5dab6e3b71b7"
migrations_dir = "../shared/migrations"

[[env.production.r2_buckets]]
binding = "AD_IMAGES_BUCKET"
bucket_name = "cmp-ad-images"
preview_bucket_name = "cmp-ad-images-preview"



# Automatically place your workloads in an optimal location to minimize latency.
# If you are running back-end logic in a Worker, running it closer to your back-end infrastructure
# rather than the end user may result in better performance.
# Docs: https://developers.cloudflare.com/workers/configuration/smart-placement/#smart-placement
# [placement]
# mode = "smart"

# Variable bindings. These are arbitrary, plaintext strings (similar to environment variables)
# Docs:
# - https://developers.cloudflare.com/workers/wrangler/configuration/#environment-variables
# Note: Use secrets to store sensitive data.
# - https://developers.cloudflare.com/workers/configuration/secrets/
# [vars]
# MY_VARIABLE = "production_value"

# Bind the Workers AI model catalog. Run machine learning models, powered by serverless GPUs, on Cloudflare’s global network
# Docs: https://developers.cloudflare.com/workers/wrangler/configuration/#workers-ai
# [ai]
# binding = "AI"

# Bind an Analytics Engine dataset. Use Analytics Engine to write analytics within your Pages Function.
# Docs: https://developers.cloudflare.com/workers/wrangler/configuration/#analytics-engine-datasets
# [[analytics_engine_datasets]]
# binding = "MY_DATASET"

# Bind a headless browser instance running on Cloudflare's global network.
# Docs: https://developers.cloudflare.com/workers/wrangler/configuration/#browser-rendering
# [browser]
# binding = "MY_BROWSER"

# Bind a D1 database. D1 is Cloudflare’s native serverless SQL database.
# Docs: https://developers.cloudflare.com/workers/wrangler/configuration/#d1-databases
# [[d1_databases]]
# binding = "MY_DB"
# database_name = "my-database"
# database_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"

# Bind a dispatch namespace. Use Workers for Platforms to deploy serverless functions programmatically on behalf of your customers.
# Docs: https://developers.cloudflare.com/workers/wrangler/configuration/#dispatch-namespace-bindings-workers-for-platforms
# [[dispatch_namespaces]]
# binding = "MY_DISPATCHER"
# namespace = "my-namespace"

# Bind a Durable Object. Durable objects are a scale-to-zero compute primitive based on the actor model.
# Durable Objects can live for as long as needed. Use these when you need a long-running "server", such as in realtime apps.
# Docs: https://developers.cloudflare.com/workers/wrangler/configuration/#durable-objects
# [[durable_objects.bindings]]
# name = "MY_DURABLE_OBJECT"
# class_name = "MyDurableObject"

# Durable Object migrations.
# Docs: https://developers.cloudflare.com/workers/wrangler/configuration/#migrations
# [[migrations]]
# tag = "v1"
# new_classes = ["MyDurableObject"]

# Bind a Hyperdrive configuration. Use to accelerate access to your existing databases from Cloudflare Workers.
# Docs: https://developers.cloudflare.com/workers/wrangler/configuration/#hyperdrive
# [[hyperdrive]]
# binding = "MY_HYPERDRIVE"
# id = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

# Bind a KV Namespace. Use KV as persistent storage for small key-value pairs.
# Docs: https://developers.cloudflare.com/workers/wrangler/configuration/#kv-namespaces
# [[kv_namespaces]]
# binding = "MY_KV_NAMESPACE"
# id = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

# Bind an mTLS certificate. Use to present a client certificate when communicating with another service.
# Docs: https://developers.cloudflare.com/workers/wrangler/configuration/#mtls-certificates
# [[mtls_certificates]]
# binding = "MY_CERTIFICATE"
# certificate_id = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"

# Bind a Queue producer. Use this binding to schedule an arbitrary task that may be processed later by a Queue consumer.
# Docs: https://developers.cloudflare.com/workers/wrangler/configuration/#queues
# [[queues.producers]]
# binding = "MY_QUEUE"
# queue = "my-queue"

# Bind a Queue consumer. Queue Consumers can retrieve tasks scheduled by Producers to act on them.
# Docs: https://developers.cloudflare.com/workers/wrangler/configuration/#queues
# [[queues.consumers]]
# queue = "my-queue"

# Bind an R2 Bucket. Use R2 to store arbitrarily large blobs of data, such as files.
# Docs: https://developers.cloudflare.com/workers/wrangler/configuration/#r2-buckets
# [[r2_buckets]]
# binding = "MY_BUCKET"
# bucket_name = "my-bucket"

# Bind another Worker service. Use this binding to call another Worker without network overhead.
# Docs: https://developers.cloudflare.com/workers/wrangler/configuration/#service-bindings
# [[services]]
# binding = "MY_SERVICE"
# service = "my-service"

# Bind a Vectorize index. Use to store and query vector embeddings for semantic search, classification and other vector search use-cases.
# Docs: https://developers.cloudflare.com/workers/wrangler/configuration/#vectorize-indexes
# [[vectorize]]
# binding = "MY_INDEX"
# index_name = "my-index"
